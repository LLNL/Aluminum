include(CMakeFindDependencyMacro)

list(APPEND CMAKE_MODULE_PATH "@CMAKE_MODULE_LOCATION@")

include(${CMAKE_CURRENT_LIST_DIR}/AluminumConfigVersion.cmake)
set(ALUMINUM_VERSION ${PACKAGE_VERSION})

set(AL_HAS_CUDA @AL_HAS_CUDA@)
set(AL_HAS_MPI_CUDA @AL_HAS_MPI_CUDA@)
set(AL_HAS_NCCL @AL_HAS_NCCL@)

set(MPI_CXX_COMPILER "@MPI_CXX_COMPILER@" CACHE FILEPATH
  "The MPI CXX compiler wrapper.")
find_package(MPI 3.0 REQUIRED COMPONENTS CXX)

find_package(OpenMP QUIET COMPONENTS CXX)
if (NOT OpenMP_FOUND AND CMAKE_CXX_COMPILER_ID MATCHES ".*[Cc]lang")
  if (NOT OpenMP_DIR)
    set(OpenMP_DIR "@OpenMP_DIR@")
  endif ()
  include(TryLLVMOpenMP)
endif ()
if (OpenMP_FOUND)
  message(STATUS "Found OpenMP: ${OpenMP_CXX_FLAGS}")
else ()
  message(FATAL_ERROR "Aluminum thinks it needs OpenMP. "
    "If using Clang or a derivative, try setting OpenMP_DIR to point "
    "to the install prefix of an OpenMP library.")
endif ()

find_package(HWLOC REQUIRED)

# Fix an issue with OpenMP's egregious use of non-language-specific
# compiler flags.
if (OPENMP_FOUND)
  get_target_property(
    __omp_compile_options OpenMP::OpenMP_CXX INTERFACE_COMPILE_OPTIONS)
  set_property(TARGET OpenMP::OpenMP_CXX PROPERTY
    INTERFACE_COMPILE_OPTIONS
    $<$<COMPILE_LANGUAGE:CXX>:${__omp_compile_options}>)
  unset(__omp_compile_options)
endif ()

if (AL_HAS_CUDA)
  find_package(CUDA REQUIRED)

  if (NOT TARGET cuda::cuda)
    add_library(cuda::cuda INTERFACE IMPORTED)
  endif ()

  set_property(TARGET cuda::cuda
    PROPERTY INTERFACE_LINK_LIBRARIES ${CUDA_LIBRARIES})

  set_property(TARGET cuda::cuda
    PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${CUDA_INCLUDE_DIRS})

  if (AL_HAS_NCCL)
    find_package(NCCL 2.0.0 QUIET)
    if (NOT NCCL_FOUND)
      if (NOT NCCL_DIR)
        set(NCCL_DIR "@NCCL_DIR@")
      endif()
      if (NOT NCCL_DIR AND NOT NCCL_LIBRARY AND NOT NCCL_INCLUDE_PATH)
        set(NCCL_LIBRARY "@NCCL_LIBRARY@" CACHE FILEPATH
          "The NCCL library" FORCE)
        set(NCCL_INCLUDE_PATH "@NCCL_INCLUDE_PATH@" CACHE PATH
          "The NCCL header include directory" FORCE)
      endif ()
      find_package(NCCL 2.0.0 REQUIRED)
    endif (NOT NCCL_FOUND)

    set_property(TARGET cuda::cuda APPEND
      PROPERTY INTERFACE_LINK_LIBRARIES cuda::nccl)
  endif ()
endif (AL_HAS_CUDA)

@PACKAGE_INIT@

set(_TMP_INCLUDE_DIRS "@PACKAGE_INCLUDE_INSTALL_DIRS@")
foreach (_DIR ${_TMP_INCLUDE_DIRS})
  set_and_check(_INCLUDE_DIR "${_DIR}")
  list(APPEND ALUMINUM_INCLUDE_DIRS "${_INCLUDE_DIR}")
endforeach (_DIR "${_TMP_INCLUDE_DIRS}")

set(_TMP_LIBRARY_DIRS "@PACKAGE_LIB_INSTALL_DIR@")
foreach (_DIR ${_TMP_LIBRARY_DIRS})
  set_and_check(_LIBRARY_DIR "${_DIR}")
  list(APPEND ALUMINUM_LIBRARY_DIRS "${_LIBRARY_DIR}")
endforeach (_DIR ${_TMP_LIBRARY_DIRS})

if (NOT TARGET AL::aluminum)
  include(${CMAKE_CURRENT_LIST_DIR}/AluminumTargets.cmake)
endif ()

check_required_components(Aluminum)

set(Aluminum_LIBRARIES AL::Al)
