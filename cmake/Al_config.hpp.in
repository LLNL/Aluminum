#pragma once

#define AL_VERSION_MAJOR "@ALUMINUM_VERSION_MAJOR@"
#define AL_VERSION_MINOR "@ALUMINUM_VERSION_MINOR@"
#define AL_VERSION_PATCH "@ALUMINUM_VERSION_PATCH@"
#define AL_VERSION "@ALUMINUM_VERSION@"
#define AL_GIT_VERSION "@ALUMINUM_GIT_VERSION@"

#cmakedefine AL_HAS_CUDA
#cmakedefine AL_HAS_MPI_CUDA
#cmakedefine AL_HAS_HOST_TRANSFER
#cmakedefine AL_HAS_NCCL
#cmakedefine AL_HAS_ROCM

#if defined AL_HAS_ROCM
#define AL_GPU_RUNTIME_PREFIX hip
#define AL_GPU_DRV_SUCCESS hipSuccess
#elif defined AL_HAS_CUDA
#define AL_GPU_RUNTIME_PREFIX cuda
#define AL_GPU_DRV_SUCCESS CUDA_SUCCESS
#endif

// The layers of indirection begin
#if defined AL_GPU_RUNTIME_PREFIX
#define AL_ADD_PREFIX_(prefix, rest) prefix##rest
#define AL_ADD_PREFIX(prefix, rest) AL_ADD_PREFIX_(prefix, rest)
#define AL_GPU_RT(symb) AL_ADD_PREFIX(AL_GPU_RUNTIME_PREFIX, symb)
#endif // defined AL_GPU_RUNTIME_PREFIX

#ifdef AL_HAS_MPI_CUDA
#cmakedefine AL_HAS_MPI_CUDA_RMA
#endif

#cmakedefine AL_DEBUG
#cmakedefine AL_DEBUG_HANG_CHECK

#cmakedefine AL_HAS_PROF
#cmakedefine AL_HAS_NVPROF
#cmakedefine AL_HAS_ROCTRACER

/** Whether to support multiple threads calling Aluminum concurrently. */
#cmakedefine AL_THREAD_MULTIPLE

#cmakedefine AL_TRACE

#cmakedefine AL_MPI_SERIALIZE
