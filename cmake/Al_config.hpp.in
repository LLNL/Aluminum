#pragma once

#define AL_VERSION_MAJOR "@ALUMINUM_VERSION_MAJOR@"
#define AL_VERSION_MINOR "@ALUMINUM_VERSION_MINOR@"
#define AL_VERSION_PATCH "@ALUMINUM_VERSION_PATCH@"
#define AL_VERSION "@ALUMINUM_VERSION@"
#define AL_GIT_VERSION "@ALUMINUM_GIT_VERSION@"

#cmakedefine AL_HAS_CALIPER
#cmakedefine AL_HAS_CUDA
#cmakedefine AL_HAS_MPI_CUDA
#cmakedefine AL_HAS_HOST_TRANSFER
#cmakedefine AL_HAS_NCCL
#cmakedefine AL_HAS_ROCM

#if defined AL_HAS_CALIPER
#define AL_CALI_MARK_FUNCTION CALI_CXX_MARK_FUNCTION
#define AL_CALI_MARK_SCOPE(name) CALI_CXX_MARK_SCOPE(name)
#else
#define AL_CALI_MARK_FUNCTION ((void) 0)
#define AL_CALI_MARK_SCOPE(...) ((void) 0)
#endif

#if defined AL_HAS_ROCM
#define AL_GPU_RUNTIME_PREFIX hip
#define AL_GPU_DRV_SUCCESS hipSuccess
#elif defined AL_HAS_CUDA
#define AL_GPU_RUNTIME_PREFIX cuda
#define AL_GPU_DRV_SUCCESS CUDA_SUCCESS
#endif

// The layers of indirection begin
#if defined AL_GPU_RUNTIME_PREFIX
#define AL_ADD_PREFIX_(prefix, rest) prefix##rest
#define AL_ADD_PREFIX(prefix, rest) AL_ADD_PREFIX_(prefix, rest)
#define AL_GPU_RT(symb) AL_ADD_PREFIX(AL_GPU_RUNTIME_PREFIX, symb)

// Functions
#define AlGpuDeviceGetAttribute AL_GPU_RT(DeviceGetAttribute)
#define AlGpuDeviceGetStreamPriorityRange \
    AL_GPU_RT(DeviceGetStreamPriorityRange)
#define AlGpuDeviceSynchronize AL_GPU_RT(DeviceSynchronize)
#define AlGpuEventCreate AL_GPU_RT(EventCreate)
#define AlGpuEventCreateWithFlags AL_GPU_RT(EventCreateWithFlags)
#define AlGpuEventDestroy AL_GPU_RT(EventDestroy)
#define AlGpuEventElapsedTime AL_GPU_RT(EventElapsedTime)
#define AlGpuEventQuery AL_GPU_RT(EventQuery)
#define AlGpuEventRecord AL_GPU_RT(EventRecord)
#define AlGpuEventSynchronize AL_GPU_RT(EventSynchronize)
#define AlGpuGetDevice AL_GPU_RT(GetDevice)
#define AlGpuGetDeviceCount AL_GPU_RT(GetDeviceCount)
#define AlGpuGetErrorString AL_GPU_RT(GetErrorString)
#define AlGpuHostGetDevicePointer AL_GPU_RT(HostGetDevicePointer)
#define AlGpuHostRegister AL_GPU_RT(HostRegister)
#define AlGpuHostRegisterDefault AL_GPU_RT(HostRegisterDefault)
#define AlGpuHostUnregister AL_GPU_RT(HostUnregister)
#define AlGpuMemcpyAsync AL_GPU_RT(MemcpyAsync)
#define AlGpuSetDevice AL_GPU_RT(SetDevice)
#define AlGpuStreamCreate AL_GPU_RT(StreamCreate)
#define AlGpuStreamCreateWithPriority AL_GPU_RT(StreamCreateWithPriority)
#define AlGpuStreamDestroy AL_GPU_RT(StreamDestroy)
#define AlGpuStreamSynchronize AL_GPU_RT(StreamSynchronize)
#define AlGpuStreamWaitEvent AL_GPU_RT(StreamWaitEvent)

// Types
#define AlGpuMemcpyKind AL_GPU_RT(MemcpyKind)
#define AlGpuStream_t AL_GPU_RT(Stream_t)
#define AlGpuEvent_t AL_GPU_RT(Event_t)

// Enum values
#define AlGpuErrorNotReady AL_GPU_RT(ErrorNotReady)
#define AlGpuEventDisableTiming AL_GPU_RT(EventDisableTiming)
#define AlGpuMemcpyDefault AL_GPU_RT(MemcpyDefault)
#define AlGpuMemcpyDeviceToDevice AL_GPU_RT(MemcpyDeviceToDevice)
#define AlGpuMemcpyDeviceToHost AL_GPU_RT(MemcpyDeviceToHost)
#define AlGpuMemcpyHostToDevice AL_GPU_RT(MemcpyHostToDevice)
#define AlGpuStreamDefault AL_GPU_RT(StreamDefault)
#define AlGpuSuccess AL_GPU_RT(Success)

// Special APIs
#if defined AL_HAS_ROCM
#define AlGpuFreeHost hipHostFree
#define AlGpuMallocHost hipHostMalloc

#include <hip/hip_version.h>
#if HIP_VERSION < 50600000
#define AlGpuDefaultEventFlags hipEventDefault
#define AlGpuNoTimingEventFlags hipEventDisableTiming
#else
#define AlGpuDefaultEventFlags hipEventDisableSystemFence
#define AlGpuNoTimingEventFlags hipEventDisableTiming | hipEventDisableSystemFence
#endif

#elif defined AL_HAS_CUDA
#define AlGpuFreeHost cudaFreeHost
#define AlGpuMallocHost cudaMallocHost

#define AlGpuDefaultEventFlags cudaEventDefault
#define AlGpuNoTimingEventFlags cudaEventDisableTiming
#endif
#endif // defined AL_GPU_RUNTIME_PREFIX

#ifdef AL_HAS_MPI_CUDA
#cmakedefine AL_HAS_MPI_CUDA_RMA
#endif

#cmakedefine AL_DEBUG
#cmakedefine AL_DEBUG_HANG_CHECK

#cmakedefine AL_HAS_PROF
#cmakedefine AL_HAS_NVPROF
#cmakedefine AL_HAS_ROCTRACER

/** Whether to support multiple threads calling Aluminum concurrently. */
#cmakedefine AL_THREAD_MULTIPLE

#cmakedefine AL_TRACE

#cmakedefine AL_MPI_SERIALIZE
